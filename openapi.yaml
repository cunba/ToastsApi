openapi: 3.0.2
info:
  description: "API to manage publications about products (coffee, tea or toast) like a social media. The idea is to create a community that publishes photos of their toasts with coffee or tea adding the price and being able to rate the products and the establishments."
  version: "1.0"
  title: "TOTECO API"
  contact:
    email: "a25540@svalero.com"
tags:
- name: "Products"
  description: "Everything about the products"
- name: "Product type"
  description: "Everything about the type of products to add"
- name: "Menu"
  description: "Everything about products which belongs to offers or menus"
- name: "Publication"
  description: "Everything about the publications"
- name: "Establishment"
  description: "Everything about the estabilshments"
- name: "User"
  description: "Everything about the users"
  
paths:
  /products:
    get:
      tags:
      - "Products"
      summary: "Get all the products"
      description: "Get all the products in the DDBB."
      operationId: "getAllProducts"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Product"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
          
    post:
      tags:
      - "Products"
      summary: "Post a new product"
      description: "Save a new product in the DDBB."
      operationId: "saveProduct"
      requestBody:
        description: "product to save"
        content: 
          application/json:
            schema:
              $ref: "#/components/schemas/ProductDTO"
      responses:
        "201":
          description: "Created"
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
                
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                
    delete:
      tags:
      - "Products"
      summary: "Delete all the products"
      description: "Delete all the products from the DDBB."
      operationId: "deleteAllProducts"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                
  
  /products/{id}:
    get:
      tags:
      - "Products"
      summary: "Get an existing product"
      description: ""
      operationId: "getProductById"
      parameters:
      - name: "id"
        in: "path"
        description: "product ID"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
      
    put:
      tags:
      - "Products"
      summary: "Update an existing product"
      description: ""
      operationId: "updateProduct"
      parameters:
      - name: "id"
        in: "path"
        description: "product ID"
        required: true
        schema:
          type: "integer"
          format: "int64"
      requestBody:
        description: "product to save"
        content: 
          application/json:
            schema:
              $ref: "#/components/schemas/ProductDTO"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
      
    delete:
      tags:
      - "Products"
      summary: "Delete all the products"
      description: ""
      operationId: "deleteProductById"
      parameters:
      - name: "id"
        in: "path"
        description: "product ID"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
      
  /products/date/{date}:
    get:
      tags:
      - "Products"
      summary: "Get products by date"
      description: "Get all the products which have this creation date.\n The date format is timestamp in miliseconds."
      operationId: "getProductsByDate"
      parameters:
      - name: "date"
        in: "path"
        description: "creation date"
        required: true
        schema:
          type: "integer"
          default: "1640604419000"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Product"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
          
  /products/date/between:
    get:
      tags:
      - "Products"
      summary: "Get products between dates"
      description: "Get all the products which have the creation date between theese.\n The dates format is timestamp in miliseconds"
      operationId: "getProductsByDateBetween"
      parameters:
      - name: "minDate"
        in: "query"
        description: "date from in timestamp miliseconds"
        required: true
        schema:
          type: "integer"
          default: "1640604419000"
      - name: "maxDate"
        in: "query"
        description: "date from in timestamp miliseconds"
        required: true
        schema:
          type: "string"
          default: "1640604419000"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Product"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
          
  /products/inMenu/{inMenu}:
    get:
      tags:
      - "Products"
      summary: "Get products which belongs (or not) to menus"
      description: "Get all the products which are part of any menu or get all the products that are not par of any menu."
      operationId: "getProductsByInMenu"
      parameters:
      - name: "inMenu"
        in: "path"
        description: "If want the products that belong to menus write true, if not write false"
        required: true
        schema:
          type: "boolean"
          default: false
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Product"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                
  /products/price:
    patch:
      tags:
      - "Products"
      summary: "Update product price"
      description: "Update the price of the indicated product."
      operationId: "updateProductsPrice"
      parameters:
      - name: "id"
        in: "query"
        required: true
        schema:
          type: "integer"
          format: "int64"
          default: 0
      - name: "price"
        in: "query"
        required: true
        schema:
          type: "number"
          default: 0.0
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Product"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
          
  /products/price/{price}:
    get:
      tags:
      - "Products"
      summary: "Get all products by price"
      description: "Get all the products which have this same price."
      operationId: "getProductsByPrice"
      parameters:
      - name: "price"
        in: "path"
        required: true
        schema:
          type: "number"
          default: 0.0
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Product"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                
  /products/price/between:
    get:
      tags:
      - "Products"
      summary: "Get products by price between"
      description: "Get all the products which prices are between theese two."
      operationId: "getProductsByPriceBetween"
      parameters:
      - name: "minPrice"
        in: "query"
        required: true
        schema:
          type: "number"
          example: 0.0
      - name: "maxPrice"
        in: "query"
        required: true
        schema:
          type: "number"
          example: 5.0
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Product"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                
  /products/punctuation/{punctuation}:
    get:
      tags:
      - "Products"
      summary: "Get all products by punctuation"
      description: "Get all the products which have this same punctuation.\n The punctuation goes from 0 to 5."
      operationId: "getProductsByPunctuation"
      parameters:
      - name: "punctuation"
        in: "path"
        required: true
        schema:
          type: "number"
          default: 0.0
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Product"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                
  /products/punctuation/between/:
    get:
      tags:
      - "Products"
      summary: "Get products by punctuation between"
      description: "Get all the products which punctuations are between theese two.\n The punctuation goes from 0 to 5."
      operationId: "getProductsByPunctuationBetween"
      parameters:
      - name: "minPunctuation"
        in: "query"
        required: true
        schema:
          type: "number"
          example: 0.0
      - name: "maxPunctuation"
        in: "query"
        required: true
        schema:
          type: "number"
          example: 5.0
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Product"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                
  /products/type:
    get:
      tags:
      - "Products"
      summary: "Get products by type id"
      description: "Get the products that belongs to this type by the id"
      operationId: "getProductsByTypeId"
      parameters:
      - name: "id"
        in: "query"
        description: "type id"
        required: true
        schema:
          type: "integer"
          format: "int64"
          example: 0
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Product"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                  
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                
  /products/menu:
    get:
      tags:
      - "Products"
      summary: "Get products by menu id"
      description: "Get the products that belongs to this menu by the id"
      operationId: "getProductsByMenuId"
      parameters:
      - name: "id"
        in: "query"
        description: "menu id"
        required: true
        schema:
          type: "integer"
          format: "int64"
          example: 0
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Product"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception" 
  
  /products/publication:
    get:
      tags:
      - "Products"
      summary: "Get products by publication id"
      description: "Get the products that belongs to this publication by the id"
      operationId: "getProductsByPublicationId"
      parameters:
      - name: "id"
        in: "query"
        description: "publication id"
        required: true
        schema:
          type: "integer"
          format: "int64"
          example: 0
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Product"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                
                
  /types:
    get:
      tags:
      - "Product type"
      summary: "Get all types"
      description: "Get all the types from the DDBB"
      operationId: "getAllTypes"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Type"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                
    post:
      tags:
      - "Product type"
      summary: "Save a type"
      description: "Save a new product type into the DDBB"
      operationId: "saveType"
      requestBody:
        description: "product type to save"
        content: 
          application/json:
            schema:
              $ref: "#/components/schemas/TypeDTO"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Type"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
    delete:
      tags:
      - "Product type"
      summary: "Delete all types"
      description: "Delete all types"
      operationId: "deleteTypes"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "string"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /types/{id}:
    get:
      tags:
      - "Product type"
      summary: "Get type by id"
      description: "Get one type by the id"
      operationId: "getTypeById"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int64"
          example: 0
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Type"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
    put:
      tags:
      - "Product type"
      summary: "Update one type"
      description: "Update the type with the indicated id"
      operationId: "updateType"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int64"
          example: 0
      requestBody:
        description: "type to update"
        content: 
          application/json:
            schema:
              $ref: "#/components/schemas/TypeDTO"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Type"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                
    delete:
      tags:
      - "Product type"
      summary: "Delete one type"
      description: "Delete the type with the indicated id"
      operationId: "deleteType"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int64"
          example: 0
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "string"
        
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /types/name/{name}:
    get:
      tags:
      - "Product type"
      summary: "Get type by name"
      description: "Get types with the indicated name"
      operationId: "getTypeByName"
      parameters:
      - name: "name"
        in: "path"
        required: true
        schema:
          type: "string"
          example: "de tomate"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Type"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /types/type/{type}:
    get:
      tags:
      - "Product type"
      summary: "Get type by type"
      description: "Get types with the indicated type"
      operationId: "getTypeByType"
      parameters:
      - name: "type"
        in: "path"
        required: true
        schema:
          type: "string"
          example: "Tostada"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Type"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /types/type/name:
    get:
      tags:
      - "Product type"
      summary: "Get type by name and type"
      description: "Get types with the indicated name and type"
      operationId: "getTypeByNameAndType"
      parameters:
      - name: "type"
        in: "query"
        required: true
        schema:
          type: "string"
          example: "Tostada"
      - name: "name"
        in: "query"
        required: true
        schema:
          type: "string"
          example: "de tomate"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Type"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
                    
  /menus:
    get:
      tags:
      - "Menu"
      summary: "Get all menus"
      description: "Get all menus"
      operationId: "getAllMenus"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Menu"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
    post:
      tags:
      - "Menu"
      summary: "Save menu"
      description: "Save one menu"
      operationId: "saveMenu"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MenuDTO"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Menu"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
    delete:
      tags:
      - "Menu"
      summary: "Delete menu"
      description: "Delete all menus"
      operationId: "deleteAllMenus"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "string"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /menus/{id}:
    get:
      tags:
      - "Menu"
      summary: "Get menu by id"
      description: "Get one menu by the indicated id"
      operationId: "getMenuById"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int64"
          example: 0
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Menu"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
    
    put:
      tags:
      - "Menu"
      summary: "Update menu"
      description: "Update an existing menu"
      operationId: "updateMenu"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int64"
          example: 0
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MenuDTO"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Menu"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
    delete:
      tags:
      - "Menu"
      summary: "Delete menu by id"
      description: "Delete an existing menu"
      operationId: "deleteMenu"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int64"
          example: 0
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "string"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /menus/date/{date}:
    get:
      tags:
      - "Menu"
      summary: "Get menu by date"
      description: "Get menus created at the indicated date.\n The date format is timestamp in miliseconds"
      operationId: "getMenuByDate"
      parameters:
      - name: "date"
        in: "path"
        required: true
        schema:
          type: "integer"
          example: 1640604419000
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Menu"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
    
  /menus/date/between:
    get:
      tags:
      - "Menu"
      summary: "Get menu by date between"
      description: "Get menus created at the indicated dates.\n The dates format is timestamp in miliseconds"
      operationId: "getMenuByDateBetween"
      parameters:
      - name: "minDate"
        in: "query"
        required: true
        schema:
          type: "integer"
          example: 1640604419000
      - name: "maxDate"
        in: "query"
        required: true
        schema:
          type: "integer"
          example: 1640604419000
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Menu"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /menus/price/{price}:
    get:
      tags:
      - "Menu"
      summary: "Get menu by price"
      description: "Get menus with the price indicated"
      operationId: "getMenuByPrice"
      parameters:
      - name: "price"
        in: "path"
        required: true
        schema:
          type: "number"
          example: 0.5
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Menu"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
    
  /menus/price/between:
    get:
      tags:
      - "Menu"
      summary: "Get menu by price between"
      description: "Get menus between the two prices indicated."
      operationId: "getMenuByPriceBetween"
      parameters:
      - name: "minPrice"
        in: "query"
        required: true
        schema:
          type: "number"
          example: 2.5
      - name: "maxPrice"
        in: "query"
        required: true
        schema:
          type: "number"
          example: 6.5
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Menu"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /menus/punctuation/{punctuation}:
    get:
      tags:
      - "Menu"
      summary: "Get menu by punctuation"
      description: "Get menus with the punctuation indicated.\n The punctuation goes from 0 to 5."
      operationId: "getMenuByPunctuation"
      parameters:
      - name: "punctuation"
        in: "path"
        required: true
        schema:
          type: "number"
          example: 0.5
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Menu"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
    
  /menus/punctuation/between:
    get:
      tags:
      - "Menu"
      summary: "Get menu by punctuation between"
      description: "Get menus between the two punctuations indicated.\n The punctuation goes from 0 to 5."
      operationId: "getMenuByPunctuationBetween"
      parameters:
      - name: "minPunctuation"
        in: "query"
        required: true
        schema:
          type: "number"
          example: 2.5
      - name: "maxPunctuation"
        in: "query"
        required: true
        schema:
          type: "number"
          example: 6.5
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Menu"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
                    
  /publications:
    get:
      tags:
      - "Publication"
      summary: "Get all publications"
      description: "Get all publications"
      operationId: "getAllPublications"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Publication"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
    post:
      tags:
      - "Publication"
      summary: "Save publication"
      description: "Save one publication"
      operationId: "savePublication"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PublicationDTO"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Publication"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
    delete:
      tags:
      - "Publication"
      summary: "Delete publications"
      description: "Delete all publications"
      operationId: "deleteAllPublications"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "string"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /publications/{id}:
    get:
      tags:
      - "Publication"
      summary: "Get publication by id"
      description: "Get one publication by the indicated id"
      operationId: "getPublicationById"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int64"
          example: 0
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Publication"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
    
    put:
      tags:
      - "Publication"
      summary: "Update publication"
      description: "Update an existing publication"
      operationId: "updatePublication"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int64"
          example: 0
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PublicationDTO"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Publication"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
    delete:
      tags:
      - "Publication"
      summary: "Delete publication by id"
      description: "Delete an existing publication"
      operationId: "deletePublication"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int64"
          example: 0
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "string"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /publications/price-punctuation:
    patch:
      tags:
      - "Publication"
      summary: "Update publication price and punctuation"
      description: "Update the price and the punctuation of the publication indicated."
      operationId: "updatePublicationPriceAndPunctuation"
      parameters:
      - name: "id"
        in: "query"
        required: true
        schema:
          type: "integer"
          format: "int64"
          example: 0
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "string"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /publications/date/{date}:
    get:
      tags:
      - "Publication"
      summary: "Get publication by date"
      description: "Get publications created at the indicated date.\n The date format is timestamp in miliseconds"
      operationId: "getPublicationByDate"
      parameters:
      - name: "date"
        in: "path"
        required: true
        schema:
          type: "integer"
          example: 1640604419000
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Publication"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
    
  /publications/date/between:
    get:
      tags:
      - "Publication"
      summary: "Get publication by date between"
      description: "Get publications created at the indicated dates.\n The dates format is timestamp in miliseconds"
      operationId: "getPublicationByDateBetween"
      parameters:
      - name: "minDate"
        in: "query"
        required: true
        schema:
          type: "integer"
          example: 1640604419000
      - name: "maxDate"
        in: "query"
        required: true
        schema:
          type: "integer"
          example: 1640604419000
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Publication"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /publications/price/{price}:
    get:
      tags:
      - "Publication"
      summary: "Get publication by price"
      description: "Get publications with the price indicated"
      operationId: "getPublicationByPrice"
      parameters:
      - name: "price"
        in: "path"
        required: true
        schema:
          type: "number"
          example: 0.5
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Publication"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
    
  /publications/price/between:
    get:
      tags:
      - "Publication"
      summary: "Get publication by price between"
      description: "Get publications between the two prices indicated."
      operationId: "getPublicationByPriceBetween"
      parameters:
      - name: "minPrice"
        in: "query"
        required: true
        schema:
          type: "number"
          example: 2.5
      - name: "maxPrice"
        in: "query"
        required: true
        schema:
          type: "number"
          example: 6.5
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Publication"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /publications/punctuation/{punctuation}:
    get:
      tags:
      - "Publication"
      summary: "Get publication by punctuation"
      description: "Get publications with the punctuation indicated.\n The punctuation goes from 0 to 5."
      operationId: "getPublicationsByPunctuation"
      parameters:
      - name: "punctuation"
        in: "path"
        required: true
        schema:
          type: "number"
          example: 0.5
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Publication"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
    
  /publications/punctuation/between:
    get:
      tags:
      - "Publication"
      summary: "Get publication by punctuation between"
      description: "Get publications between the two punctuations indicated.\n The punctuation goes from 0 to 5."
      operationId: "getPublicationByPunctuationBetween"
      parameters:
      - name: "minPunctuation"
        in: "query"
        required: true
        schema:
          type: "number"
          example: 2.5
      - name: "maxPunctuation"
        in: "query"
        required: true
        schema:
          type: "number"
          example: 6.5
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Publication"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /publications/establishment:
    get:
      tags:
      - "Publication"
      summary: "Get publication by establishment id"
      description: "Get publications that belongs to the establishment indicated"
      operationId: "getPublicationByEstablishmentId"
      parameters:
      - name: "id"
        in: "query"
        description: "establishment id"
        required: true
        schema:
          type: "integer"
          format: "int64"
          example: 0
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Publication"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /publications/user:
    get:
      tags:
      - "Publication"
      summary: "Get publication by user id"
      description: "Get publications that belongs to the user indicated."
      operationId: "getPublicationByUserId"
      parameters:
      - name: "id"
        in: "query"
        description: "user id"
        required: true
        schema:
          type: "integer"
          format: "int64"
          example: 0
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Publication"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /publications/product:
    get:
      tags:
      - "Publication"
      summary: "Get publication by product id"
      description: "Get publications that belongs to the product indicated."
      operationId: "getPublicationByProductId"
      parameters:
      - name: "id"
        in: "query"
        description: "product id"
        required: true
        schema:
          type: "integer"
          format: "int64"
          example: 0
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Publication"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /publications/date/price/puntuation/between:
    get:
      tags:
      - "Publication"
      summary: "Get publication by date, price and punctuation between"
      description: "Get publications that belongs to the between dates, the between price and the between punctuations indicateds."
      operationId: "getPublicationByDateBetweenAndPriceBetweenAndPunctuationBetween"
      parameters:
      - name: "minDate"
        in: "query"
        required: true
        schema:
          type: "integer"
          example: 1640604419000
      - name: "maxDate"
        in: "query"
        required: true
        schema:
          type: "integer"
          example: 1640604419000
      - name: "minPrice"
        in: "query"
        required: true
        schema:
          type: "number"
          example: 0.4
      - name: "maxPrice"
        in: "query"
        required: true
        schema:
          type: "number"
          example: 5.4
      - name: "minPunctuation"
        in: "query"
        required: true
        schema:
          type: "number"
          example: 3.5
      - name: "maxPunctuation"
        in: "query"
        required: true
        schema:
          type: "number"
          example: 4.9
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Publication"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
                    
  /establishments:
    get:
      tags:
      - "Establishment"
      summary: "Get all establishments"
      description: "Get all establishments"
      operationId: "getAllEstablishments"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Establishment"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
    post:
      tags:
      - "Establishment"
      summary: "Save establishment"
      description: "Save one establishment"
      operationId: "saveEstablishment"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EstablishmentDTO"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Establishment"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
    delete:
      tags:
      - "Establishment"
      summary: "Delete establishments"
      description: "Delete all establishments"
      operationId: "deleteAllEstablishments"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "string"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /establishments/{id}:
    get:
      tags:
      - "Establishment"
      summary: "Get establishment by id"
      description: "Get one establishment by the indicated id"
      operationId: "getEstablishmentById"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int64"
          example: 0
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Establishment"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
    
    put:
      tags:
      - "Establishment"
      summary: "Update establishment"
      description: "Update an existing establishment"
      operationId: "updateEstablishment"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int64"
          example: 0
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EstablishmentDTO"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Establishment"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
    delete:
      tags:
      - "Establishment"
      summary: "Delete establishment by id"
      description: "Delete an existing establishment"
      operationId: "deleteEstablishment"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int64"
          example: 0
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "string"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /establishment/name/{name}:
    get:
      tags:
      - "Establishment"
      summary: "Get establishment by user id"
      description: "Get establishments that belongs to the user indicated."
      operationId: "getEstablishmentByName"
      parameters:
      - name: "name"
        in: "path"
        required: true
        schema:
          type: "string"
          example: "Casa Paco"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Establishment"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /establishment/open/{open}:
    get:
      tags:
      - "Establishment"
      summary: "Get establishment by open"
      description: "Get establishments that are (or not) open."
      operationId: "getEstablishmentByOpen"
      parameters:
      - name: "open"
        in: "path"
        required: true
        schema:
          type: "boolean"
          example: true
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Establishment"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /establishment/location/{location}:
    get:
      tags:
      - "Establishment"
      summary: "Get establishment by location"
      description: "Get establishments that are in the indicated location."
      operationId: "getEstablishmentByLocation"
      parameters:
      - name: "location"
        in: "path"
        required: true
        schema:
          $ref: "#/components/schemas/Location"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Establishment"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /establishments/date/{date}:
    get:
      tags:
      - "Establishment"
      summary: "Get establishment by date"
      description: "Get establishments created at the indicated date.\n The date format is timestamp in miliseconds"
      operationId: "getEstablishmentByDate"
      parameters:
      - name: "date"
        in: "path"
        required: true
        schema:
          type: "integer"
          example: 1640604419000
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Establishment"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
    
  /establishments/date/between:
    get:
      tags:
      - "Establishment"
      summary: "Get establishment by date between"
      description: "Get establishments created at the indicated dates.\n The dates format is timestamp in miliseconds"
      operationId: "getEstablishmentByDateBetween"
      parameters:
      - name: "minDate"
        in: "query"
        required: true
        schema:
          type: "integer"
          example: 1640604419000
      - name: "maxDate"
        in: "query"
        required: true
        schema:
          type: "integer"
          example: 1640604419000
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Establishment"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /establishments/punctuation:
    patch:
      tags:
      - "Establishment"
      summary: "Update establishment punctuation"
      description: "Update the punctuation of the establishment indicated."
      operationId: "updateEstablishmentPunctuation"
      parameters:
      - name: "id"
        in: "query"
        description: "establishment id"
        required: true
        schema:
          type: "integer"
          format: "int64"
          example: 0
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "string"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /establishments/punctuation/{punctuation}:
    get:
      tags:
      - "Establishment"
      summary: "Get establishment by punctuation"
      description: "Get establishments with the punctuation indicated.\n The punctuation goes from 0 to 5."
      operationId: "getEstablishmentByPunctuation"
      parameters:
      - name: "punctuation"
        in: "path"
        required: true
        schema:
          type: "number"
          example: 0.5
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Establishment"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
    
  /establishment/punctuation/between:
    get:
      tags:
      - "Establishment"
      summary: "Get establishment by punctuation between"
      description: "Get establishments between the two punctuations indicated.\n The punctuation goes from 0 to 5."
      operationId: "getEstablishmentByPunctuationBetween"
      parameters:
      - name: "minPunctuation"
        in: "query"
        required: true
        schema:
          type: "number"
          example: 2.5
      - name: "maxPunctuation"
        in: "query"
        required: true
        schema:
          type: "number"
          example: 6.5
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Establishment"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
                    
  /users:
    get:
      tags:
      - "User"
      summary: "Get all users"
      description: "Get all users"
      operationId: "getAllUsers"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
    post:
      tags:
      - "User"
      summary: "Save user"
      description: "Save one user"
      operationId: "saveUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDTO"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
    delete:
      tags:
      - "User"
      summary: "Delete users"
      description: "Delete all users"
      operationId: "deleteAllUsers"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "string"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /users/{id}:
    get:
      tags:
      - "User"
      summary: "Get user by id"
      description: "Get one user by the indicated id"
      operationId: "getUserById"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int64"
          example: 0
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
    
    put:
      tags:
      - "User"
      summary: "Update user"
      description: "Update an existing user"
      operationId: "updateUser"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int64"
          example: 0
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDTO"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
    delete:
      tags:
      - "User"
      summary: "Delete user by id"
      description: "Delete an existing user"
      operationId: "deleteUser"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int64"
          example: 0
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "string"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /users/publications-number:
    patch:
      tags:
      - "User"
      summary: "Update user publications number"
      description: "Update the number of publications of the user with the indicated id."
      operationId: "updateUserPublicationNumber"
      parameters:
      - name: "id"
        in: "query"
        required: true
        schema:
          type: "integer"
          format: "int64"
          example: 0
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "string"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /users/money-spent:
    patch:
      tags:
      - "User"
      summary: "Update user money spent"
      description: "Update the money spent by the user with the indicated id."
      operationId: "updateUserMoneySpent"
      parameters:
      - name: "id"
        in: "query"
        required: true
        schema:
          type: "integer"
          format: "int64"
          example: 0
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "string"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /users/password:
    patch:
      tags:
      - "User"
      summary: "Update user password"
      description: "Update the password of the user with the indicated id."
      operationId: "updateUserPassword"
      parameters:
      - name: "id"
        in: "query"
        required: true
        schema:
          type: "integer"
          format: "int64"
          example: 0
      - name: "password"
        in: "query"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "string"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /users/disable:
    patch:
      tags:
      - "User"
      summary: "Disable user"
      description: "Disable the user account."
      operationId: "disableUser"
      parameters:
      - name: "id"
        in: "query"
        required: true
        schema:
          type: "integer"
          format: "int64"
          example: 0
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "string"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
  /users/activate:
    patch:
      tags:
      - "User"
      summary: "Activate user"
      description: "Activate the user account."
      operationId: "activateUser"
      parameters:
      - name: "id"
        in: "query"
        required: true
        schema:
          type: "integer"
          format: "int64"
          example: 0
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: "string"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exception"
                    
                    
                    
components:
  schemas:
    Product:
      properties:
        id: 
          type: "integer"
          format: "int64"
          example: 0
        type:
          $ref: "#/components/schemas/Type"
        date:
          type: "string"
          format: "dd-MM-yyyy"
          example: "04-03-2022"
        price:
          type: "number"
          example: 3.40
        puntuation:
          type: "number"
          example: 4.3
        menu:
          $ref: "#/components/schemas/Menu"
        publication:
          $ref: "#/components/schemas/Publication"
          
    ProductDTO:
      properties:
        inMenu:
          type: "boolean"
          example: false
        price:
          type: "number"
          example: 3.40
        puntuation:
          type: "number"
          example: 4.3
        typeId:
          type: "integer"
          format: "int64"
          example: 0
        menuId:
          type: "integer"
          format: "int64"
          example: 0
        publicationId:
          type: "integer"
          format: "int64"
          example: 0

          
    Type:
      properties:
        id: 
          type: "integer"
          format: "int64"
          example: 0
        type:
          type: "string"
          example: "Tostada"
        productName:
          type: "string"
          example: "de tomate"
            
    TypeDTO:
      properties:
        type:
          type: "string"
          example: "Tostada"
        product_name:
          type: "string"
          example: "de tomate"
         
          
    Menu:
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 0
        date:
          type: "string"
          format: "dd-MM-yyyy"
          example: "02-04-2022"
        price:
          type: "number"
          example: 3.4
        puntuation:
          type: "number"
          example: 4.5
            
    MenuDTO:
      properties:
        price:
          type: "number"
          example: 3.4
        puntuation:
          type: "number"
          example: 4.5
            
          
    Publication:
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 0
        date:
          type: "string"
          format: "dd-MM-yyyy"
          example: "03-05-2022"
        totalPrice:
          type: "number"
          example: 3.4
        totalPunctuation:
          type: "number"
          example: 2.5
        photo:
          type: "string"
        user:
          $ref: "#/components/schemas/User"
        establishment:
          $ref: "#/components/schemas/Establishment"
            
    PublicationDTO:
      properties:
        photo:
          type: "string"
        userId:
          type: "integer"
          format: "int64"
        establishmentId:
          type: "integer"
          format: "int64"
    
    
    Establishment:
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 0
        name:
          type: "string"
          example: "Casa Paco"
        creationDate:
          type: "string"
          format: "dd-MM-yyyy"
          example: "05-04-2021"
        location:
          $ref: "#/components/schemas/Location"
        open:
          type: "boolean"
          example: false
        punctuation:
          type: "number"
          example: 4.5
            
    EstablishmentDTO:
      properties:
        name:
          type: "string"
          example: "Casa Paco"
        location:
          type: "string"
        open:
          type: "boolean"
          example: false
          
    Location:
      properties:
        latitude:
          type: "number"
          example: 0.0
        longitude:
          type: "number"
          example: 0.0
            
            
    User:
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 0
        name:
          type: "string"
          example: "Irene"
        surname:
          type: "string"
          example: "Cunto"
        birthDate:
          type: "string"
          format: "dd-MM-yyyy"
          example: "05-09-1995"
        email:
          type: "string"
          example: "a25540@svalero.com"
        password:
          type: "string"
        creationDate:
          type: "string"
          format: "dd-MM-yyyy"
          example: "04-03-2022"
        active:
          type: "boolean"
          example: true
        moneySpent:
          type: "number"
          example: 25.4
        publicationsNumber:
          type: "integer"
          example: 17
            
    UserDTO:
      properties:
        name:
          type: "string"
          example: "Irene"
        surname:
          type: "string"
          example: "Cunto"
        birth_date:
          type: "string"
          format: "dd-MM-yyyy"
          example: "05-09-1995"
        email:
          type: "string"
          example: "a25540@svalero.com"
        password:
          type: "string"


    Exception:
      properties:
        code: 
          type: "string"
        error:
          type: "string"
        message:
          type: "string"